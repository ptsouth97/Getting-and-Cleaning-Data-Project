x<-
x
x+1
x
y
x<-1:20
x
x<-c(0.5, 0.6)
x
y<-c(1.7, "a")
y
y<-c(TRUE,2)
y
y<-c("a",TRUE)
y
m<-matrix(nrow=2,ncol=3)
m
dim(m)
x<-list(1,"a",TRUE,1+4i)
x
x<-factor(c("yes","yes","no","yes","no"))
x
table(x)
unclass(x)
x<-list(foo=1:4,bar=0.6)
x[1]
x[[1]]
x$bar
x[["bar"]]
$bar
install.packages("swirl")
library(swirl)
ls()
rm(list=ls())
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
x<-list(2,"a","b",TRUE)
X[[1]]
x[[1]]
x[[1]]+1
x<-1:4
y<-2
x+y
data<-read.csv("hw1_data.csv")
data<-read.csv("C:\Users\Blake\Desktop\hw1_data.csv")
hw1_data <- read.csv("C:/Users/Blake/Desktop/hw1_data.csv")
View(hw1_data)
hw1_data
mean(ozone)
readLines(hw1_data,2)
col1<-hw1_data(1,1:153)
x<-hw1_data
x
nrow(x)
ncol(x)
names(x)
mean?
x[1]
x[1][1]
x[1,1]
bad<-is.na(x)
bad
bad<-is.na(x[1])
bad
nrow?
nrow(na.omit(x))
153-111
nrow(na.omit(x[1]))
153-116
colMeans(x[1], ra.rm=FALSE, dims=1)
colMeans(x)
colMeans(x, na.rm=TRUE)
x[Ozone>31]
x[x[1]>31]
x[x[1]>31, x[3]>90]
x[x[1]>31 & x[3]>90]
x[x[1]>31 && x[3]>90]
y<-x[1]>31
y
y<-x[x[1]>30]
y
newdata<-x[which(x$Ozone>31&x$Temp>90)]
x
newdata<-x[which(x[1]>31&x[3]>90)]
newdata
newdata<-x[which(x[1]>31)]
x
newdata
newdata<-x[which(x$"Ozone">31&x$"Temp">90)]
ls
newdata<-subset(x, Ozone > 31 & Temp > 90)
newdata
colMeans(newdata)
newdata<-subset(x, Temp==6)
newdata
newdata<-subset(x, Temp=6)
newdata
newdata<-subset(x, Month ==6)
newdata
colMeans(newdata)
newdata<-subset(x, Month==5)
newdata
x
swirl
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?:
?':'
seq(1,20)
seq(0,10,by=0.5)
myseq<-seq(5,10,length=30)
my_seq<-seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_alon(my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-0.5,55,-10,6
num_vect<-(0.5,55,-10,6)
num_vect<-[0.5,55,-10,6]
num_vect<-0.5 55 -10 6
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>=6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = " ")
my_name<-c(my_char, "Blake")
my_name
paste(my_name, collapse=" ")
paste("Hello","world", sep=" ")
paste("Hello","world!", sep = " ")
paste(1:3,c("x","y","z"), sep="")
paste(1:3,c("X","Y","Z"), sep="")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z))
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
bye
library(swirl)
swirl()
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data<-data.frame(patients,my_matrix)
my_data
class(my_data)
cnames<-c("patient","age","weight","bp","rating","test")
colnames(cnames)
colnames(my_data)<-cnames
my_data
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
!5==7
FALSE & FALSE
TRUE&c(TRUE,FALSE,FALSE)
TRUE&&c(TRUE,FALSE,FALSE)
TRUE|c(TRUE,FALSE,FALSE)
TRUE||c(TRUE,FALSE,FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
add2
add2<-function(x,y) {
x + y
}
add2(3,5)
above <- function(x, n) {
use <- x > n
x[use]
}
x <- 1:20
above(x)
above(x, 12)
above(x)
above <- function(x, n=10) {
use <- x > n
x[use]
}
above(x)
columnmean<-function(y){
nc<-ncol(y)
means<-numeric(nc)
for(i in 1:nc){
means[i]<-mean(y[,i])
}
}
columnmean(airquality)
m<-NULL
x<<-y
m
y<-numeric()
y
class(y)
makeVector <- function(x = numeric()) {     #creates an object of type list
m <- NULL                                 #will be the cached value
set <- function(y) {                      #set the value of the vector
x <<- y                                 #<<- means super assignment
m <<- NULL
}
get <- function() x                       #get the value of the vector
setmean <- function(mean) m <<- mean      #set the value of the mean
getmean <- function() m                   #get the value of the mean
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
bigVec<-makeVector(1:1000)
bigvec
bigVec
biggerVec<-makeVector(1:100000)
biggerVec
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(bigVec)
cachemean(bigVec)
cachemean(biggerVec)
cachemean(biggerVec)
c<-rbind(c(1,-1/4),c(-1/4,1))
c
inv(c)
ginv(c)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL                                 #will be the cached value
set <- function(y) {                      #set the value of the matrix
x <<- y                                 #<<- means super assignment
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse      #set the value of the mean..called by
#cachemean() access and stores the
#value during superassignment
getinverse <- function() m
list(set = set, get = get,              #accessed each time makeVector is called.
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(c)
solve(c)
c
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse(x)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheSolve(c)
getinverse <- function() m
setinverse <- function(inverse) m <<- inverse
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
setinverse(m)
m
}
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get()
m <- solve(data, ...)
setinverse(m)
m
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get()
m <- solve(data, ...)
setinverse(m)
m
}
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- getinverse()x
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- get()
m <- solve(data, ...)
setinverse(m)x
m
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x.getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x.get()
m <- solve(data, ...)
x.setinverse(m)
m
}
cacheSolve(c)
list(a=1:5, b=rnorm(10))
x<-list(a=1:5, b=rnorm(10))
lapply(x,mean)
mean(x)
traceback()
getwd()
install(sqldf)
install("sqldf")
install.packages("sqldf")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringAsFactors=FALSE)
mydf<-read.csv("path2csv",stringAsFactors=FALSE)
?read.csv
mydf<-read.csv("path2csv",stringsAsFactors=FALSE)
mydf<-read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id, package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-(X:size))
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package=="swirl")
filter(cran,r_version=="3.1.1",country=="US")
?Comparison
filter(cran,r_version=="3.0.2",country=="IN")
filter(cran,r_version<="3.0.2",country=="IN")
filter(cran,country=="US"|country=="IN")
filter(cran,size>100500 & r_os=="linux-gnu")
filter(cran,size>100500 , r_os=="linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2, country,desc(r_version), ip_id)
cran3<-select(cran,ip_id,package, size)
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^20,size_gb=size_mb/2^10)
mutate(cran3,correct_size=size+100)
mutate(cran3,correct_size=size+1000)
summarize(cran,avg_bytes=mean(size))
data.frame(subject=1:3,activity=4:6)
data.frame(subject=1:3,activity=4:6,x_avg=7:9)
test<-data.frame(subject=1:3,activity=4:6,x_avg=7:9)
test
test$subject
test$1
mean(test$x_avg)
mean(test$activity)
mean(test$subject)
grep("1",test)
test[2,1]<-1
test[3,1]<-1
test
grep("1",test)
grep("1",test$subject)
grep("4",test$subject)
wherearetheones<-grep("1",test$subject)
wherearetheones
class(wherearetheones)
setwd("~/Personal/Hobbies and Interests/Astronomy/AAVSO/Coursera/Getting and Cleaning Data/Project/Getting-and-Cleaning-Data-Project")
unz_data <- unzip("getdata-projectfiles-UCI HAR Dataset.zip")
unz_data
acc_x_test <- read.table(unz_data[5])
summary(acc_x_test)
features <- read.table(unz_data[2])
length(features)
features
features$mean
features$std
acc_x_test
